/// Example demonstrating the usage of di_generator_build package.
///
/// This example shows how to use the @AutoRegister annotation to automatically
/// generate dependency injection code for your services and repositories.
///
/// ## Setup
///
/// 1. Add dependencies to pubspec.yaml:
/// ```yaml
/// dependencies:
///   get_it: ^7.6.0
///
/// dev_dependencies:
///   build_runner: ^2.4.0
///   di_generator_build: ^1.0.0
/// ```
///
/// 2. Create build.yaml:
/// ```yaml
/// targets:
///   $default:
///     builders:
///       di_generator_build|di_generator:
///         enabled: true
/// ```
///
/// 3. Run code generation:
/// ```bash
/// dart run build_runner build
/// ```
import 'package:get_it/get_it.dart';
import 'package:di_generator_build/di_generator_build.dart';

part 'example.g.dart';

/// Example service with no dependencies.
///
/// This service will be registered as a factory by default,
/// creating a new instance each time it's requested.
@AutoRegister()
class LoggerService {
  void log(String message) {
    print('LOG: $message');
  }
}

/// Example repository for user data.
///
/// This repository simulates fetching user data from a remote source.
/// It's registered as a factory, so each request gets a fresh instance.
@AutoRegister()
class UserRepository {
  Future<List<String>> getUsers() async {
    await Future.delayed(Duration(milliseconds: 100));
    return ['Alice', 'Bob', 'Charlie'];
  }
}

/// Example service with dependencies.
///
/// This service depends on UserRepository and LoggerService.
/// It's registered as a singleton, so the same instance is reused.
@AutoRegister(registrationType: RegisterAs.singleton)
class UserService {
  final UserRepository _repository;
  final LoggerService _logger;
  
  UserService(this._repository, this._logger);
  
  Future<void> displayUsers() async {
    _logger.log('Fetching users...');
    final users = await _repository.getUsers();
    _logger.log('Found ${users.length} users: ${users.join(', ')}');
  }
}

/// Example configuration service with parameters.
///
/// This service has primitive parameters with default values.
/// It's registered as a lazy singleton, so it's created on first use.
@AutoRegister(registrationType: RegisterAs.lazySingleton)
class ConfigService {
  final String _environment;
  final int _timeout;
  final bool _debugMode;
  
  ConfigService([
    this._environment = 'production',
    this._timeout = 30,
    this._debugMode = false,
  ]);
  
  String get environment => _environment;
  int get timeout => _timeout;
  bool get debugMode => _debugMode;
  
  void displayConfig() {
    print('Environment: $_environment');
    print('Timeout: ${_timeout}s');
    print('Debug Mode: $_debugMode');
  }
}

/// Example async service that requires initialization.
///
/// This service demonstrates async registration patterns.
@AutoRegister(registrationType: RegisterAs.lazySingletonAsync)
class AsyncService {
  final Future<String> _initialization;
  
  AsyncService(this._initialization);
  
  static Future<AsyncService> create() async {
    final init = await Future.delayed(Duration(seconds: 1), () => 'ready');
    return AsyncService(Future.value(init));
  }
  
  Future<String> getStatus() async {
    return await _initialization;
  }
}

/// Main function demonstrating the complete setup and usage.
void main() async {
  print('ðŸš€ DI Generator Build Example');
  print('==============================\n');
  
  // Initialize dependencies using generated methods
  // These methods are automatically generated by the build runner
  getLoggerService();
  getUserRepository();
  getUserService();
  getConfigService();
  
  // Use the services
  final config = GetIt.instance.get<ConfigService>();
  config.displayConfig();
  
  print('\n--- User Service Demo ---');
  final userService = GetIt.instance.get<UserService>();
  await userService.displayUsers();
  
  print('\n--- Async Service Demo ---');
  final asyncService = GetIt.instance.get<AsyncService>();
  final status = await asyncService.getStatus();
  print('Async service status: $status');
  
  print('\nâœ… Dependency injection setup complete!');
  print('\nðŸ“š Generated Methods Available:');
  print('- getLoggerService()');
  print('- getUserRepository()');
  print('- getUserService()');
  print('- getConfigService()');
  print('- getAsyncService()');
}
